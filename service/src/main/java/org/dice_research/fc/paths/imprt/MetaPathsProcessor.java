package org.dice_research.fc.paths.imprt;

import java.util.Collection;
import java.util.List;
import java.util.Map.Entry;
import org.aksw.jena_sparql_api.core.QueryExecutionFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.Statement;
import org.dice_research.fc.data.QRestrictedPath;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Class responsible for the meta-paths pre-processing.
 * 
 * @author Alexandra Silva
 *
 */
@Component
public abstract class MetaPathsProcessor {
  
  private static final Logger LOGGER = LoggerFactory.getLogger(MetaPathsProcessor.class);

  /**
   * The predicate to meta-paths map
   */
  protected String metaPaths;

  /**
   * The query execution factory
   */
  protected QueryExecutionFactory qef;
  
  /**
   * JSON file extension
   */
  protected final String JSON_EXTENSION = ".json";

  @Autowired
  public MetaPathsProcessor(String metaPaths, QueryExecutionFactory qef) {
    this.metaPaths = metaPaths;
    this.qef = qef;
  }

  /**
   * Pre-processes paths loaded from file
   * 
   * @param metaPaths paths generated by a third party library
   * @param subject the fact's subject
   * @param object the fact's object
   * @return the {@link Collection} of paths after pre-processing
   */
  protected abstract Collection<QRestrictedPath> processMetaPaths(Statement fact);

  /**
   * Reads a property's metapaths from file. It is assumed each file pertains only to one property.
   * 
   * @param fileName
   * @return
   */
  protected Entry<Property, List<QRestrictedPath>> readMetaPaths(String fileName) {
    LOGGER.info("Reading paths from {} .",fileName);
    DefaultImporter importer = new DefaultImporter();
    return importer.importPaths(fileName);
  }

  public String getMetaPaths() {
    return metaPaths;
  }

  public void setMetaPaths(String metaPaths) {
    this.metaPaths = metaPaths;
  }
}
