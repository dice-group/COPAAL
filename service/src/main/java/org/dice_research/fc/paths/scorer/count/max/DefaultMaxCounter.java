package org.dice_research.fc.paths.scorer.count.max;

import org.aksw.jena_sparql_api.core.QueryExecutionFactory;
import org.dice_research.fc.data.Predicate;
import org.dice_research.fc.paths.PredicateFactory;
import org.dice_research.fc.sparql.restrict.ITypeRestriction;

/**
 * Maximum count retriever class for the default configuration (no virtual types). This is meant to
 * be used with a {@link Predicate} generated by {@link PredicateFactory}.
 * 
 * @author Alexandra Silva
 *
 */
public class DefaultMaxCounter extends MaxCounter {

  public DefaultMaxCounter(QueryExecutionFactory qef) {
    super(qef);
  }

  @Override
  public long deriveMaxCount(Predicate predicate) {
    return countTypeInstances(predicate.getDomain()) * countTypeInstances(predicate.getRange());
  }

  protected long countTypeInstances(ITypeRestriction restriction) {
    StringBuilder queryBuilder = new StringBuilder();
    queryBuilder.append("SELECT (count(DISTINCT ?s) AS ?");
    queryBuilder.append(COUNT_VARIABLE_NAME);
    queryBuilder.append(") WHERE { ");
    restriction.addRestrictionToQuery("s", queryBuilder);
    queryBuilder.append(" }");
    return executeCountQuery(queryBuilder);
  }
}
